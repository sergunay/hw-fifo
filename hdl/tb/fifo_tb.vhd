--*****************************************************************************
-- Company			EPFL-LSM
-- Project Name		Lavender
--*****************************************************************************
-- Doxygen labels
--! @file 			fifo_tb.vhd
--! @brief 			Self-checking testbench for box_area component
--! @details 		Test vectors are generated by tvgen_area.py
--!					Dependencies:
--!						$PRJ_DIR/msim/in/integral_image.txt
--!						$PRJ_DIR/msim/in/tv_area.txt
--!						$PRJ_DIR/hdl/bhv/sram_bhv.vhd
--! @author 		Selman Erg√ºnay
--! @date 			12.03.2017
--*****************************************************************************
-- Revision History:
--   Rev 0.0 - 
--*****************************************************************************
-- Naming Conventions:
--   active low signals:                    "*_n"
--   clock signals:                         "clk", "clk_div#", "clk_#x"
--   reset signals:                         "rst", "rst_n"
--   generics:                              "C_* -all UPPERCASE"
--   state machine current/next state:      "*_cs" / "*_ns"         
--   pipelined or register delay signals:   "*_d#"
--   counter signals:                       "*cnt*"
--	 data valid signals						"*_vld"
--   internal version of output port:       "*_i"
--   ports:                                 "- Names begin with Uppercase"
--   processes:                             "*_PROC"
--   component instantiations:              "<ENTITY_>I_<#|FUNC>"
-- 	 simulation control signals: 			"sim_*"
--   signal naming for external comp:		"<comp>_*"
--   signal naming for internal signals:	"<who drives>_"
--*****************************************************************************
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library std;
use std.textio.all;

entity fifo_tb is
end entity;

----------------------------------------------------------------------------
architecture arch_sim_tb_top of fifo_tb is
----------------------------------------------------------------------------
	component fifo
		generic(
			DATA_WIDTH 	: natural := 8;
			ADDR_WIDTH 	: natural := 4;
			FIFO_DEPTH	: natural := 16);
		port(
			Clk			: in std_logic;
			Rst			: in std_logic;
			D_in 		: in std_logic_vector(DATA_WIDTH-1 downto 0);
			Wr_en		: in std_logic;
			Full 		: out std_logic;
			D_out		: out std_logic_vector(DATA_WIDTH-1 downto 0);
			Rd_en 		: in std_logic;
			Empty 		: out std_logic);
	end component;
----------------------------------------------------------------------------
	-- Simulation constants
	constant CLK_PER			: time 		:= 10 ns; 
	constant DATA_WIDTH 		: natural 	:= 8;
	constant ADDR_WIDTH 		: natural 	:= 8;
	constant FIFO_DEPTH 		: natural 	:= 5;
	
	file   tv_file				: text;
	
	-- Simulation control signals
	signal sim_clk				: std_logic := '0';
	signal sim_rst 				: std_logic := '0'; 		-- system active high reset 
	signal sim_stop				: boolean 	:= false;		-- stop simulation?
	
	signal sim_fifo_in_data		: std_logic_vector(DATA_WIDTH-1 downto 0) := (others=>'0');
	signal sim_fifo_wr_en		: std_logic := '0';
	signal sim_fifo_rd_en		: std_logic := '0';
	
	signal fifo_full			: std_logic_vector(0 downto 0) := "0";
	signal fifo_empty			: std_logic_vector(0 downto 0) := "0";
	signal fifo_out_data		: std_logic_vector(DATA_WIDTH-1 downto 0) := (others=>'0');
----------------------------------------------------------------------------
begin
----------------------------------------------------------------------------
	I_FIFO: fifo
		generic map(
			DATA_WIDTH 	=> DATA_WIDTH,
			ADDR_WIDTH 	=> ADDR_WIDTH,
			FIFO_DEPTH	=> FIFO_DEPTH)
		port map(
			Clk		=> sim_clk,
			Rst		=> sim_rst,
			D_in 	=> sim_fifo_in_data,
			Wr_en	=> sim_fifo_wr_en,
			Full 	=> fifo_full(0),
			D_out	=> fifo_out_data,
			Rd_en 	=> sim_fifo_rd_en,
			Empty 	=> fifo_empty(0));
----------------------------------------------------------------------------
	--! @brief 100MHz system clock generation
	CLK_STIM : sim_clk 	<= not sim_clk after CLK_PER/2 when not sim_stop;	
----------------------------------------------------------------------------	
	STIM_PROC: process
		variable tv_line	: line;
		variable op_id		: integer;
		variable push_data	: integer;
		variable pop_data	: integer;
		variable empty		: integer;
		variable full		: integer;
		variable empty_prev	: integer;
		variable full_prev	: integer;		

		procedure init is
		begin
			sim_rst 	<= '1';
			wait for 100 ns;
			sim_rst		<= '0';
		end procedure init;
		
		procedure check_flags(
			constant empty	: integer;
			constant full	: integer) is
		begin
			assert to_integer(unsigned(fifo_empty)) = empty
			report 	"Empty/Exp = " 	 & integer'image(empty) & " / " &
					"Empty/Got = " 	 & integer'image(to_integer(unsigned(fifo_empty)))
			severity ERROR;
			
			assert to_integer(unsigned(fifo_full)) = full
			report 	"Full/Exp = " 	 & integer'image(full) & " / " &
					"Full/Got = " 	 & integer'image(to_integer(unsigned(fifo_full)))
			severity ERROR;
		end procedure check_flags;
		
		procedure check_data(
			constant pop_data	: integer) is
		begin
			assert to_integer(unsigned(fifo_out_data)) = pop_data
			report 	"Data/Exp = " 	 & integer'image(pop_data) & " / " &
					"Data/Got = " 	 & integer'image(to_integer(unsigned(fifo_out_data)))
			severity ERROR;
		end procedure check_data;
		
		procedure push(
			constant push_data	: integer := 0) is
		begin 
			sim_fifo_wr_en		<= '1';
			sim_fifo_in_data	<= std_logic_vector(to_unsigned(push_data, DATA_WIDTH));
		end procedure push;
		
		procedure pop is
		begin
			sim_fifo_rd_en		<= '1';
		end procedure pop;
		
		procedure release is
		begin
			sim_fifo_wr_en		<= '0';
			sim_fifo_rd_en		<= '0';
		end procedure release;
----------------------------------------------------------------------------
	begin
		file_open(tv_file, "./in/tv.txt",  READ_MODE);
		init;
		empty 	:= 1;
		full 	:= 0;
		while not endfile(tv_file) loop
		
			empty_prev	:= empty;
			full_prev 	:= full;
		
			readline(tv_file, tv_line);
			read(tv_line, op_id);
			read(tv_line, push_data);
			read(tv_line, pop_data);
			read(tv_line, empty);
			read(tv_line, full);			
			
			if op_id = 0 then
				push(push_data);
				wait until falling_edge(sim_clk);
				release;
				check_flags(empty, full);
			end if;
			
			if op_id = 1 then
				pop;
				wait until falling_edge(sim_clk);
				release;
				check_flags(empty, full);
				if empty_prev = 0 then
					check_data(pop_data);
				end if;
			end if;
			
			if op_id = 2 then
				push(push_data);
				pop;
				wait until falling_edge(sim_clk);
				release;
				check_flags(empty, full);
				if empty_prev = 0 then
					check_data(pop_data);
				end if;
			end if;
		end loop;
		sim_stop 	<= TRUE;
		wait;
	end process STIM_PROC;
----------------------------------------------------------------------------
end arch_sim_tb_top;
----------------------------------------------------------------------------
-----------------------------END OF FILE------------------------------------
----------------------------------------------------------------------------